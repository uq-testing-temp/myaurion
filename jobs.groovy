def gitUrl = "https://git.its.uq.edu.au/its-eas-testing/"

def systems = [
	"myAurion_Smoke",
  	"myAurion_Regression"
]

def commonTags = [
    
    "debug",
   	"healthcheck",
   	"Leave",
   	"MyTasksAsSupervisor" ,
   	"Payroll",
   	"Timesheet",
   	"TrainingCourses"
]

def myaurionsmokeTags = [
	"Login_Smoke",
"EmploymentHistory_Smoke",
"EmployeeSearch_Smoke",
 "HRProfile_Smoke" ,
"Training_Smoke" ,
 "Leave_Smoke" ,
 "SupervisorTasks_Smoke" ,
 "Timesheet_Smoke" ,
"Payroll_Smoke" ,
"MenuJourney_Smoke"
]

def myaurionRegressionTags = [
"PersonalDetails_Regression" ,
"Training_Regression" ,
"StaffSchedule_Regression" ,
"Leave_Regression" ,
"SupervisorTasks_Regression" ,
"Timesheet_Regression" ,
"Payroll_Smoke" ,
"Payroll_Regression"
]


systems.each { system ->
    buildMonitorView("${system} monitor") {
        description("All jobs for project ${system}")
        jobs { regex("${system}.*")}
	}
    listView("${system} jobs") {
        description("All jobs for project ${system}")
        filterBuildQueue()
        filterExecutors()
        jobs { regex("${system}.*")}
        columns {
            status()
            weather()
            name()
            lastSuccess()
            lastFailure()
            lastDuration()
            buildButton()
        }
	}
	if(system == "myAurion_Smoke")
		tags = commonTags + myaurionsmokeTags
	if(system == "myAurion_Regression")
		tags = commonTags + myaurionRegressionTags		
    tags.each { tag ->
        job("${system}-${tag}") {
        	description("<p><span style=\"font-family:trebuchet ms,helvetica,sans-serif;\"><img alt=\"\" src=\"http://10.48.56.66:8080/userContent/awzz2g.png\" style=\"width: 300px; height: 168px;\" /></span></p>This is an autogenerated job for <strong>${system}</strong> project running tests tagged as <strong><em>@${tag}</em></strong>")
            displayName("${system} @${tag}")
            scm {
                git {
                    remote {
                        name('origin')
                        url("${gitUrl}${system}.git")
                        credentials('ed45b22c-3198-4f74-b334-c24cf6d3b6ee')
                    }
                    branch('**/russell')
                }
            }
            triggers { cron('@daily') }
            wrappers { 
                timeout { absolute(60) } 
                colorizeOutput()
                timestamps()
            }
            steps {
                shell ("""#!/bin/bash
					# cleaning up old conainers
					sudo docker ps | grep 'hours ago\\|days ago' | awk '{print \$1}' | xargs --no-run-if-empty sudo docker rm -f || true"""
                )
                shell ("""#!/bin/bash
                    #selecting free port for selenium #TODO
                    export SELENIUM_PORT=\$(for port in \$(seq 4444 65000); do echo -ne \"\\035\" | telnet 127.0.0.1 \$port > /dev/null 2>&1; [ \$? -eq 1 ] && echo \"\$port\" && break; done)
					echo \$SELENIUM_PORT > env_SELENIUM_PORT.txt"""
				)
				shell ("""#!/bin/bash
					export SELENIUM_PORT=`cat env_SELENIUM_PORT.txt`
                    # launching selenium hub docker container
					sudo docker rm -f selenium-\$SELENIUM_PORT || true # cleaning up container if exist
                    sudo docker run --name selenium-\$SELENIUM_PORT -d -p \$SELENIUM_PORT:4444 -v /dev/shm:/dev/shm selenium/standalone-chrome:3.4.0-einsteinium 
                    sleep 5 # allowing time to start"""
                )
                shell ("""#!/bin/bash
					export SELENIUM_PORT=`cat env_SELENIUM_PORT.txt`
                    #running the test with retry attempts
					for i in {1..3}; do 
                    	mvn test -Dcucumber.options=\"--tags @${tag} --tags ~@skipped\" -Dlog4j.configuration=file:Log4j.xml && break || sleep 5
					done"""
				)
                shell ("""#!/bin/bash
                    export SELENIUM_PORT=`cat env_SELENIUM_PORT.txt`
                    # cleaning up the container 
                    sudo docker rm -f selenium-\$SELENIUM_PORT || true"""
                      )
            }
            publishers {
                cucumberReports {
                    jsonReportPath('target/')
                    pluginUrlPath('url')
                    fileIncludePattern('**/*.json')
                }
                archiveJunit('target/surefire-reports/*.xml') {
                    allowEmptyResults()
                    retainLongStdout()
                    healthScaleFactor(5)
                    testDataPublishers {
                		publishTestStabilityData()
            		}
                }
                archiveArtifacts {
                    pattern('target/screenshots/*.*')
                    allowEmpty()
        		}
			}
    	}
	}
}